{"version":3,"sources":["serviceWorker.js","pages/navbar.js","pages/footer.js","pages/content.js","index.js"],"names":["Boolean","window","location","hostname","match","React","Component","Konten","Card","style","width","Body","Title","Subtitle","className","Text","Link","href","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qJCfgBC,IAAMC,U,0BCAND,IAAMC,U,OCkBbC,E,iLAhBP,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,mBACA,kBAACJ,EAAA,EAAKK,SAAN,CAAeC,UAAU,mBAAzB,iBACA,kBAACN,EAAA,EAAKO,KAAN,uGAIA,kBAACP,EAAA,EAAKQ,KAAN,CAAWC,KAAK,KAAhB,aACA,kBAACT,EAAA,EAAKQ,KAAN,CAAWC,KAAK,KAAhB,sB,GAZCZ,IAAMC,WCM3BY,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SJwH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31f1a9f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nclass Navbar1 extends React.Component {\n    constructor(props) {\n      super(props);\n  \n      this.toggle = this.toggle.bind(this);\n      this.state = {\n        isOpen: false\n      };\n    }\n    toggle() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n    render() {\n      return (\n        <div>\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink href=\"/components/\">Components</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    Options\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                    <DropdownItem>\n                      Option 1\n                    </DropdownItem>\n                    <DropdownItem>\n                      Option 2\n                    </DropdownItem>\n                    <DropdownItem divider />\n                    <DropdownItem>\n                      Reset\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n      );\n    }\n  }\n\n  export default Navbar1;","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\n\nclass Footers extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>.col</Col>\n        </Row>\n        <Row>\n          <Col>.col</Col>\n          <Col>.col</Col>\n          <Col>.col</Col>\n          <Col>.col</Col>\n        </Row>\n        <Row>\n          <Col xs=\"3\">.col-3</Col>\n          <Col xs=\"auto\">.col-auto - variable width content</Col>\n          <Col xs=\"3\">.col-3</Col>\n        </Row>\n        <Row>\n          <Col xs=\"6\">.col-6</Col>\n          <Col xs=\"6\">.col-6</Col>\n        </Row>\n        <Row>\n          <Col xs=\"6\" sm=\"4\">.col-6 .col-sm-4</Col>\n          <Col xs=\"6\" sm=\"4\">.col-6 .col-sm-4</Col>\n          <Col sm=\"4\">.col-sm-4</Col>\n        </Row>\n        <Row>\n          <Col sm={{ size: 6, order: 2, offset: 1 }}>.col-sm-6 .order-sm-2 .offset-sm-1</Col>\n        </Row>\n        <Row>\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>.col-sm-12 .col-md-6 .offset-md-3</Col>\n        </Row>\n        <Row>\n          <Col sm={{ size: 'auto', offset: 1 }}>.col-sm-auto .offset-sm-1</Col>\n          <Col sm={{ size: 'auto', offset: 1 }}>.col-sm-auto .offset-sm-1</Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Footers;","import React from 'react';\nimport { Card } from 'reactstrap'\n\nclass Konten extends React.Component {\n    render () {\n        return (\n            <Card style={{ width: '18rem' }}>\n                <Card.Body>\n                    <Card.Title>Card Title</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">Card Subtitle</Card.Subtitle>\n                    <Card.Text>\n                    Some quick example text to build on the card title and make up the bulk of\n                    the card's content.\n                    </Card.Text>\n                    <Card.Link href=\"#\">Card Link</Card.Link>\n                    <Card.Link href=\"#\">Another Link</Card.Link>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\nexport default Konten;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Baru from './pages/home';\nimport Navbar1 from './pages/navbar';\nimport Footers from './pages/footer';\nimport Konten from './pages/content'\n\nReactDOM.render(<Konten />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}